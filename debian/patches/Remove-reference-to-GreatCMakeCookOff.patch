From: Ole Streicher <olebole@debian.org>
Date: Sat, 8 Oct 2016 14:43:07 +0200
Subject: Remove reference to GreatCMakeCookOff

GreateCMakeCookOff is not part of Debian, but some scripts are required for
sopt. They are included with this patch.
See https://bugs.debian.org/832748 for a discussion about getting
GreatCMakeCookOff into Debian.

URL of GreatCMakeCookOff is https://github.com/UCL/GreatCMakeCookOff
---
 CMakeLists.txt                 |  22 +++-----
 cmake_files/AddCatchTest.cmake | 112 +++++++++++++++++++++++++++++++++++++++++
 cmake_files/dependencies.cmake |   6 +--
 3 files changed, 122 insertions(+), 18 deletions(-)
 create mode 100644 cmake_files/AddCatchTest.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7600912..bb38997 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,21 +3,15 @@ project(Sopt CXX)
 
 # Location of extra cmake includes for the project
 list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake_files)
-# Downloads and installs GreatCMakeCookOff
-# It contains a number of cmake recipes
-include(LookUp-GreatCMakeCookOff)
 
-# Version and git hash id
-include(VersionAndGitRef)
-set_version(2.0.0)
-get_gitref()
+set(Sopt_VERSION 2.0.0)
 
 option(tests          "Enable testing"                         on)
-option(python         "Enable python"                          on)
-option(benchmarks     "Enable benchmarking"                    on)
-option(examples       "Enable Examples"                        on)
+option(python         "Enable python"                          off)
+option(benchmarks     "Enable benchmarking"                    off)
+option(examples       "Enable Examples"                        off)
 option(logging        "Enable logging"                         on)
-option(regressions    "Enable regressions"                     on)
+option(regressions    "Enable regressions"                     off)
 option(openmp         "Enable OpenMP"                          on)
 option(archer         "Compiling on ARCHER"                    off)
 
@@ -29,12 +23,12 @@ if(tests)
 endif()
 
 # Add c++11 stuff
-include(AddCPP11Flags)
-include(CheckCXX11Features)
+set(CXX11_FLAGS "${CXX11_FLAGS} -std=gnu++11")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_FLAGS}")
+set(PROJECT_USES_CPP11 True CACHE INTERNAL "Uses c++11.")
 if(tests AND python)
   include(AddPyTest)
 endif()
-cxx11_feature_check(REQUIRED unique_ptr nullptr override constructor_delegate)
 include(compilations)
 
 # search/install dependencies
diff --git a/cmake_files/AddCatchTest.cmake b/cmake_files/AddCatchTest.cmake
new file mode 100644
index 0000000..177612b
--- /dev/null
+++ b/cmake_files/AddCatchTest.cmake
@@ -0,0 +1,112 @@
+# Function to create a common main
+function(common_catch_main)
+  if(TARGET common_catch_main_object)
+    return()
+  endif()
+  file(WRITE "${CMAKE_BINARY_DIR}/common_catch_main.cc"
+    "#define CATCH_CONFIG_MAIN\n"
+    "#include \"catch.hpp\"\n"
+  )
+  add_library(common_catch_main_object OBJECT "${CMAKE_BINARY_DIR}/common_catch_main.cc")
+  if(CATCH_INCLUDE_DIR)
+    target_include_directories(common_catch_main_object PRIVATE ${CATCH_INCLUDE_DIR})
+  endif()
+endfunction()
+
+# A function to create a test, once a an executable exists
+function(add_catch_test_with_seed testname testexec seed)
+  cmake_parse_arguments(catch "NOCATCHLABEL" "WORKING_DIRECTORY" "LABELS;ARGUMENTS" ${ARGN})
+
+  unset(EXTRA_ARGS)
+  if(catch_WORKING_DIRECTORY)
+    set(EXTRA_ARGS WORKING_DIRECTORY ${catch_WORKING_DIRECTORY})
+  endif()
+  set(arguments ${catch_ARGUMENTS})
+  if(NOT "${seed}" STREQUAL "")
+    list(APPEND arguments --rng-seed ${seed})
+  else()
+    list(APPEND arguments --rng-seed time)
+  endif()
+
+  if(CATCH_JUNIT)
+    add_test(NAME ${testname}
+      COMMAND ${testexec}
+          ${arguments}
+          -r junit
+          -o ${PROJECT_BINARY_DIR}/Testing/${testname}.xml
+    )
+  else()
+    add_test(NAME ${testname} COMMAND ${testexec} ${arguments} ${EXTRA_ARGS})
+  endif()
+
+  if(NOT catch_NOCATCHLABEL)
+    list(APPEND catch_LABELS catch)
+  endif()
+  set_tests_properties(${testname} PROPERTIES LABELS "${catch_LABELS}")
+endfunction()
+
+# Then adds a function to create a test
+function(add_catch_test testname)
+  cmake_parse_arguments(catch
+    "NOMAIN;NOTEST;NOCATCHLABEL"
+    "SEED;WORKING_DIRECTORY;COMMON_MAIN;PRECOMMAND"
+    "LIBRARIES;DEPENDS;INCLUDES;LABELS;ARGUMENTS"
+    ${ARGN}
+  )
+
+  # Source deduce from testname if possible
+  unset(source)
+  if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${testname}.cc")
+    set(source ${testname}.cc)
+  elseif(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/${testname}.cpp")
+    set(source ${testname}.cpp)
+  elseif("${catch_UNPARSED_ARGUMENTS}" STREQUAL "")
+    message(FATAL_ERROR "No source given or found for ${testname}")
+  endif()
+
+  # By default, uses a common main function for all, compiled once
+  # We create here
+  if(catch_NOMAIN)
+    add_executable(test_${testname} ${source} ${catch_UNPARSED_ARGUMENTS})
+  elseif(catch_COMMON_MAIN)
+    add_executable(test_${testname}
+      ${source} $<TARGET_OBJECTS:${catch_COMMON_MAIN}> ${catch_UNPARSED_ARGUMENTS})
+  else()
+    common_catch_main()
+    add_executable(test_${testname}
+      ${source} $<TARGET_OBJECTS:common_catch_main_object> ${catch_UNPARSED_ARGUMENTS})
+  endif()
+
+  if(catch_LIBRARIES)
+    target_link_libraries(test_${testname} ${catch_LIBRARIES})
+  endif()
+  if(CATCH_INCLUDE_DIR)
+    target_include_directories(test_${testname} PRIVATE ${CATCH_INCLUDE_DIR})
+  endif()
+  if(catch_INCLUDES)
+    target_include_directories(test_${testname} PRIVATE ${catch_INCLUDES})
+  endif()
+  if(catch_DEPENDS)
+    add_dependencies(test_${testname} ${catch_DEPENDS})
+  endif()
+  if(TARGET lookup_dependencies)
+    add_dependencies(test_${testname} lookup_dependencies)
+  endif()
+
+  if(catch_NOCATCHLABEL)
+    set(catch_NOCATCHLABEL "NOCATCHLABEL")
+  else()
+    unset(catch_NOCATCHLABEL)
+  endif()
+  set(test_command test_${testname})
+  if(catch_PRECOMMAND)
+    set(test_command "${catch_PRECOMMAND} ${test_command}")
+  endif()
+  if(NOT catch_NOTEST)
+    add_catch_test_with_seed(
+      test_${testname} "test_${testname}" "${catch_SEED}" ${catch_UNPARSED_ARGUMENTS}
+      ${catch_NOCATCHLABEL} WORKING_DIRECTORY ${catch_WORKING_DIRECTORY}
+      LABELS ${catch_LABELS} ARGUMENTS ${catch_ARGUMENTS}
+    )
+  endif()
+endfunction()
diff --git a/cmake_files/dependencies.cmake b/cmake_files/dependencies.cmake
index 1810b99..3fffa97 100644
--- a/cmake_files/dependencies.cmake
+++ b/cmake_files/dependencies.cmake
@@ -1,8 +1,6 @@
-include(PackageLookup)  # check for existence, or install external projects
-
-lookup_package(Eigen3 ARGUMENTS HG_REPOSITORY https://bitbucket.org/LukePratley/eigen)
+find_package(Eigen3 REQUIRED)
 if(logging)
-  lookup_package(spdlog REQUIRED)
+  find_package(spdlog REQUIRED)
 endif()
 
 find_package(TIFF)
